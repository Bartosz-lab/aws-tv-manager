---
- name: Create AMI VM
  amazon.aws.ec2_instance:
    tags:
      Ansible: true
      Cloud-TV: true
      Role: wireguard_ami
    name: TV Wireguard AMI
    key_name: "{{ key_name }}"
    vpc_subnet_id: "{{ subnet_nat_id }}"
    instance_type: "{{ instance_type }}"
    security_groups: 
      - "{{ sg_management_id }}"
    image_id: "{{ image_id }}"
    state: running
  register: instance_ami

- ansible.builtin.meta: refresh_inventory

- name: Configure AMI
  delegate_to: "{{ hostvars[groups.group_wireguard_ami[0]].private_dns_name }}"
  delegate_facts: true
  become: true
  block:
    - name: Install Wireguard
      ansible.builtin.apt:
        update_cache: true
        name: wireguard
        state: present

    - name: Create health check systemd service file
      ansible.builtin.template:
        src: health_check.service.j2
        dest: /lib/systemd/system/health_check.service

    - name: Enable and start health check
      ansible.builtin.systemd:
        name: health_check.service
        state: started
        enabled: true
        daemon_reload: true

- name: Save AMI
  amazon.aws.ec2_ami:
    tags:
      Name: "{{ ami_name }}"
      Ansible: true
      Cloud-TV: true
    instance_id: "{{ instance_ami.instances[0].instance_id }}"
    wait: true
    name: "{{ ami_name }}"
  register: result_ami

- name: Set AMI id 
  ansible.builtin.set_fact:
    ami_id: "{{ result_ami.image_id }}"

- name: Terminame AMI VM
  amazon.aws.ec2_instance:
    instance_ids:
      - "{{ instance_ami.instances[0].instance_id }}"
    state: terminated
    wait: false
  register: instance_ami
