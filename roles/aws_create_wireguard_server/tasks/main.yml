---
- name: Create Subnets
  amazon.aws.ec2_vpc_subnet:
    tags:
      Name: "TV Wireguard Subnet {{ item.name }}"
      Ansible: true
      Cloud-TV: true
    az: "{{ region }}{{ item.name }}"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.cidr }}"

  loop: "{{ az }}"
  register: subnets

- name: Add Subnets to Route Table
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    lookup: id
    route_table_id: "{{ rt_igw_id }}"
    purge_subnets: false
    purge_routes: false
    subnets: "{{ subnets.results | map(attribute='subnet.id') }}"

- name: Create security group
  amazon.aws.ec2_security_group:
    tags:
      Name: TV VPN Security Group
      Ansible: true
      Cloud-TV: true
    name: TV VPN Security Group
    description: Allow inboud trafic to wireguard
    vpc_id: "{{ vpc_id }}"
    rules: 
      - proto: udp
        from_port: "{{ wg_port }}"
        to_port: "{{ wg_port }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: allow trafic to wireguard
      - proto: tcp
        from_port: "{{ wg_port }}"
        to_port: "{{ wg_port }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: allow trafic from health check
  register: security_group

- name: Get AMIs
  amazon.aws.ec2_ami_info:
    filters:
      tag:Name: "{{ ami_name }}"
      tag:Ansible: 'True'
      tag:Cloud-TV: 'True'
  register: ami_info

- name: Create Wireguard AMI
  ansible.builtin.include_tasks:
    file: create_ami.yml
  when: ami_info.images[0] is not defined

- name: Set AMI id
  ansible.builtin.set_fact:
    ami_id: "{{ ami_info.images[0].image_id }}"
  when: ami_info.images[0] is defined

- name: Create Instances
  amazon.aws.ec2_instance:
    tags:
      Ansible: true
      Cloud-TV: true
      Role: wireguard
    name: "TV Wireguard {{ item.item.name }}"
    key_name: "{{ key_name }}"
    vpc_subnet_id: "{{ item.subnet.id }}"
    instance_type: "{{ instance_type }}"
    security_groups: 
      - "{{ security_group.group_id }}"
      - "{{ sg_management_id }}"
    image_id: "{{ ami_id }}"
    state: running
  loop: "{{ subnets.results }}"
  loop_control:
        label: "{{ item.item.name }}"
  register: instances
      
- name: Create a target group for Load balancer
  community.aws.elb_target_group:
    tags:
      Ansible: true
      Cloud-TV: true
    name: tv-wireguard-tg
    protocol: UDP
    target_type: instance
    port: "{{ wg_port }}"
    vpc_id: "{{ vpc_id }}"
    state: present
    # Buggy task, can't update existing group, for now edit it manually
    # health_check_protocol: http
    # health_check_port: "{{ wg_port }}"
    # health_check_path: /
    # successful_response_codes: "200"
  register: target_group

- name: Add targets to target group
  community.aws.elb_target:
    target_group_name: "{{ target_group.target_group_name }}"
    target_id: "{{ item }}"
    state: present
  loop:  "{{ instances.results | map(attribute='instances') | flatten | map(attribute='instance_id') }}"

- name: Create Load balancer
  community.aws.elb_network_lb:
    tags:
      Name: TV VPN LB
      Ansible: true
      Cloud-TV: true
    name: tv-vpn-lb
    cross_zone_load_balancing: true
    subnets: "{{ subnets.results | map(attribute='subnet.id') }}"
    listeners:
      - Protocol: UDP 
        Port: "{{ wg_port }}"
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{ target_group.target_group_name }}"

