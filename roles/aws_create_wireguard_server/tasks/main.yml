---
- name: "Create subnets"
  amazon.aws.ec2_vpc_subnet:
    az: "{{ region }}{{ item.name }}"
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.cidr }}"
    tags:
      Name: "Cloud TV VPN Subnet {{ item.name }}"
  loop: "{{ az }}"
  register: subnets

- name: Create security group
  amazon.aws.ec2_security_group:
    name: Cloud TV VPN Security Group
    tags:
      Name: Cloud TV VPN Security Group
    description: Allow inboud trafic to wireguard
    vpc_id: "{{ vpc_id }}"
    rules:
      - proto: tcp
        from_port: "{{ wg_port }}"
        to_port: "{{ wg_port }}"
        cidr_ip: 0.0.0.0/0
        rule_desc: allow trafic to wireguard
  register: security_group

- name: Create VPN Instances
  amazon.aws.ec2_instance:
    name: "VPN Wireguard {{ item.item.name }}"
    key_name: "test"
    vpc_subnet_id: "{{ item.subnet.id }}"
    instance_type: "{{ instance_type }}"
    security_group: "{{ security_group.group_name }}"
    image_id: "{{ image_id }}"
    network:
      assign_public_ip: true
    state: running
  loop: "{{ subnets.results }}"
  loop_control:
        label: "{{ item.item.name }}"
  register: instances
      
- name: Create a target group for Load balancer
  community.aws.elb_target_group:
    name: "cloud-tv-vpn-tg"
    protocol: TCP
    target_type: "instance"
    port: "{{ wg_port }}"
    vpc_id: "{{ vpc_id }}"
    state: present
  register: target_group

- name: Add targets to target group
  community.aws.elb_target:
    target_group_name: "{{ target_group.target_group_name }}"
    target_id: "{{ item }}"
    state: present
  loop:  "{{ instances.results | map(attribute='instances') | flatten | map(attribute='instance_id') }}"

- name: Create Load balancer
  community.aws.elb_network_lb:
    name: "cloud-tv-vpn-lb"
    tags:
      Name: "Cloud TV VPN LB"
    cross_zone_load_balancing: true
    subnets: "{{ subnets.results | map(attribute='subnet.id') }}"
    listeners:
      - Protocol: TCP 
        Port: "{{ wg_port }}"
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{ target_group.target_group_name }}"

